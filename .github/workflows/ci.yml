name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "‚ùå Code is not properly formatted:"
          gofmt -s -l .
          echo "Run: gofmt -s -w ."
          exit 1
        fi
        echo "‚úÖ Code formatting is correct"
        
    - name: Run vet
      run: go vet ./...
      
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
          
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    name: Build Binary
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build Linux binary
      env:
        GOOS: linux
        GOARCH: amd64
        CGO_ENABLED: 0
      run: |
        go build \
          -a -installsuffix cgo \
          -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
          -o site-monitor \
          .
        
        # Test the binary
        ./site-monitor --version 2>/dev/null || echo "‚úÖ Binary built successfully"
        
        # Show binary info
        ls -la site-monitor
        file site-monitor
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: site-monitor-binary
        path: site-monitor
        retention-days: 30

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: site-monitor-binary
        path: ./
        
    - name: Generate checksum
      run: |
        sha256sum site-monitor > site-monitor.sha256
        echo "üìã Generated checksum:"
        cat site-monitor.sha256
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          site-monitor
          site-monitor.sha256
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        body: |
          ## üêß Linux Binary
          
          Single binary for Linux x86_64 systems.
          
          ### Installation
          ```bash
          # Download binary
          wget https://github.com/ton-username/site-monitor/releases/latest/download/site-monitor
          
          # Make executable
          chmod +x site-monitor
          
          # Install system-wide (optional)
          sudo mv site-monitor /usr/local/bin/
          
          # Or run locally
          ./site-monitor
          ```
          
          ### Verify integrity
          ```bash
          # Download checksum
          wget https://github.com/ton-username/site-monitor/releases/latest/download/site-monitor.sha256
          
          # Verify
          sha256sum -c site-monitor.sha256
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}